Tokens:
PROGRAM : Program
IDENTIFIER : Program1
 : (
IDENTIFIER : output
 : )
 : ;
VAR : var
IDENTIFIER : count
 : :
IDENTIFIER : integer
 : ;
BEGIN : begin
FOR : for
IDENTIFIER : count
 : :=
INTEGER : 1
TO : to
INTEGER : 10
DO : do
WRITELN : writeln
 : (
STRING : 'Go, Spartans!'
 : )
 : ;
END : end
 : .
EOF : <EOF>

Parse tree (Lisp format):
(program (programHeader Program (programIdentifier Program1) (programParameters ( output )) ;) (block (declarations (variablesPart var (variableDeclarationsList (variableDeclarations (variableIdentifierList (variableIdentifier count)) : (typeSpecification (simpleType (typeIdentifier integer)))))) ;) (compoundStatement begin (statementList (statement (forStatement for (variable (variableIdentifier count)) := (expression (simpleExpression (term (factor (number (unsignedNumber (integerConstant 1))))))) to (expression (simpleExpression (term (factor (number (unsignedNumber (integerConstant 10))))))) do (statement (writelnStatement writeln (writeArguments ( (writeArgument (expression (simpleExpression (term (factor (stringConstant 'Go, Spartans!')))))) )))))) ; (statement emptyStatement)) end)) .)
